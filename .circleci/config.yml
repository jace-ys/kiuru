version: 2

jobs:
  client.web:
    docker:
      - image: circleci/node:12.14
    working_directory: ~/kru-travel/frontend/client.web
    steps:
      - checkout:
          path: ~/kru-travel
      - restore_cache:
          key: client.web-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Lint
          command: npm run lint
      - run:
          name: Run tests
          command: npm test
      - run:
          name: Build
          command: npm run build
      - save_cache:
          key: client.web-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules

  service.auth:
    docker:
      - image: circleci/golang:1.13
    working_directory: ~/kru-travel/backend/service.auth
    steps:
      - checkout:
          path: ~/kru-travel
      - restore_cache:
          key: service.auth-cache-{{ checksum "go.sum" }}
      - run:
          name: Install protoc
          command: ~/kru-travel/.circleci/setup/protoc go
      - run:
          name: Verify proto
          command: |
            make proto
            if [ $(git diff | wc -l) -gt 0 ]; then
              echo "Generated code not up to date with proto schema"
              exit 1
            fi
      - run:
          name: Install dependencies
          command: go mod download
      - run:
          name: Lint
          command: |
            if [ -n "$(gofmt -l .)" ]; then
              exit 1
            fi
      - run:
          name: Run tests
          command: make test
      - save_cache:
          key: service.auth-cache-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod

  service.user:
    docker:
      - image: circleci/golang:1.13
    working_directory: ~/kru-travel/backend/service.user
    steps:
      - checkout:
          path: ~/kru-travel
      - restore_cache:
          key: service.user-cache-{{ checksum "go.sum" }}
      - run:
          name: Install protoc
          command: ~/kru-travel/.circleci/setup/protoc go
      - run:
          name: Verify proto
          command: |
            make proto
            if [ $(git diff | wc -l) -gt 0 ]; then
              echo "Generated code not up to date with proto schema"
              exit 1
            fi
      - run:
          name: Install dependencies
          command: go mod download
      - run:
          name: Lint
          command: |
            if [ -n "$(gofmt -l .)" ]; then
              exit 1
            fi
      - run:
          name: Run tests
          command: make test
      - save_cache:
          key: service.user-cache-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod

  test.integration:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/kru-travel/test
    steps:
      - checkout:
          path: ~/kru-travel
      - restore_cache:
          key: test.integration-cache-{{ checksum "go.sum" }}
      - run:
          name: Go 1.13
          command: |
            sudo rm -rf /usr/local/go
            curl -sL https://dl.google.com/go/go1.13.linux-amd64.tar.gz | sudo tar -xz -C /usr/local/
      - run:
          name: Install protoc
          command: ~/kru-travel/.circleci/setup/protoc go
      - run:
          name: Verify proto
          command: |
            make proto
            if [ $(git diff | wc -l) -gt 0 ]; then
              echo "Generated code not up to date with proto schema"
              exit 1
            fi
      - run:
          name: Install dependencies
          command: go mod download
      - run:
          name: Lint
          command: |
            if [ -n "$(gofmt -l .)" ]; then
              exit 1
            fi
      - run:
          name: Setup
          command: make setup
      - run:
          name: Run tests
          command: make integration
      - save_cache:
          key: test.integration-cache-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod

workflows:
  version: 2
  kru-travel:
    jobs:
      - client.web
      - service.auth
      - service.user
      - test.integration
